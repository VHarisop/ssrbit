
- Add bigops
- alias for bitset operations

  - specify the general theory, which properties do really need to work
    over the tuple representation?

  - for a start we can take a bitset type as a complete lattice. [This
    should help integrating with Cyril's future library]

    This should replace the current "SET" module interface used in PE
    paper, for reference it is:

  # T = Set
  Parameter T : Type.
  Parameter eq    : T -> T -> bool.
  Parameter empty : T.
  Parameter singl : 'I_k -> T.
  Parameter compl : T -> T.
  Parameter mem   : T -> 'I_k -> bool.
  Parameter inter : T -> T -> T.
  Parameter union : T -> T -> T.
  Parameter card  : T -> nat.

  # We could just rebind the notation..... and share with finset.

  # Definable operations that may work more efficiently...
  Parameter insert : T -> 'I_wordsize -> T.
  Parameter remove : T -> 'I_wordsize -> T.
  Parameter keep_min : forall (E: T) x, x \in E -> T.
  Parameter symdiff : T -> T -> T.

- expand theory of arithmetic.

* Build

  - Fix makefile (it now spuriously rebuilds bits.v and axioms.v

* Extraction

  - Move to forallInt2

  - Check why we get a stack overflow on int32 (we should not call enum_all_tuples)

  - Cache conversion on all tests. Now we do:

    forallInt2 (fun i j ->
        coq_Tnative (add i j) (adds_eff w (bitsFromInt w i) (bitsFromInt w j)))

    However, we'd like to use a single forallInt2 and cache the result of bitsFromInt.

  - Direct arithmetic over bitseq is a must if we want some efficiency.

    Now, the test for add is:

    coq_Tnative (add i j) (adds_eff w (bitsFromInt w i) (bitsFromInt w j)))

    which will indeed call peano arithmetic inside adds_eff!
